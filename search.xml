<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++ 问题笔记</title>
      <link href="/2023/12/10/c++%E9%97%AE%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/12/10/c++%E9%97%AE%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="getline-问题"><a href="#getline-问题" class="headerlink" title="getline()问题"></a>getline()问题</h1><p>getline函数是读取一行的文字，在你使用getline之前或许输入过回车在c++读取的时候会将这一行前的回车读入到字符串中会造成一些问题</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在getline之前添加</span></span><br><span class="line">cin.<span class="built_in">ignore</span>();</span><br><span class="line">cin.<span class="built_in">get</span>();</span><br><span class="line"><span class="built_in">getchar</span>();</span><br></pre></td></tr></table></figure><p>参考{<a href="https://www.cnblogs.com/hhddcpp/p/4308587.html">C++ 的getline问题 - Blue妞 - 博客园 (cnblogs.com)</a>}</p><p>​</p><h1 id="transform-字符串大小写转换"><a href="#transform-字符串大小写转换" class="headerlink" title="transform() {字符串大小写转换}"></a>transform() {字符串大小写转换}</h1><p>使用方法</p><p>transform(s.begin,s.end(),<strong>s.begin()</strong>,::[<strong>tolower</strong>|<strong>toupper</strong>]);</p><p>粗体地方不要忘记</p><ul><li><strong>tolower</strong> 转换为小写字母</li><li><strong>toupper</strong> 转换为大写字母</li></ul><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode</title>
      <link href="/2023/12/10/leetcode/"/>
      <url>/2023/12/10/leetcode/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h1><h2 id="2023-12-6"><a href="#2023-12-6" class="headerlink" title="2023.12.6"></a>2023.12.6</h2><h3 id="933-最近的请求次数"><a href="#933-最近的请求次数" class="headerlink" title="933.最近的请求次数"></a>933.最近的请求次数</h3><p><a href="https://leetcode.cn/problems/number-of-recent-calls/">933. 最近的请求次数 - 力扣（LeetCode）</a></p><p><strong>本题不好理解</strong>  使用队列“队列是一种先进先出的数据结构。” queue</p><p>确切地说，返回在 <code>[t-3000, t]</code> 内发生的请求数</p><p><strong>保证</strong> 每次对 <code>ping</code> 的调用都使用比之前更大的 <code>t</code> 值。</p><p>就是在[t-3000,t]之间 请求的个数</p><p>recentCounter.ping(1);     &#x2F;&#x2F; requests &#x3D; [1]，范围是 [-2999,1]，返回 1<br>recentCounter.ping(100);   &#x2F;&#x2F; requests &#x3D; [<strong>1</strong>, <strong>100</strong>]，范围是 [-2900,100]，返回 2<br>recentCounter.ping(3001);  &#x2F;&#x2F; requests &#x3D; [<strong>1</strong>, <strong>100, 3001</strong>]，范围是 [1,3001]，返回 3<br>recentCounter.ping(3002);  &#x2F;&#x2F; requests &#x3D; [1, <strong>100, 3001, 3002</strong>]，范围是 [2,3002]，返回 3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&quot;RecentCounter&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;]</span><br><span class="line">[[], [1], [100], [3001], [3002]]</span><br><span class="line">输出：</span><br><span class="line">[null, 1, 2, 3, 3]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecentCounter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">RecentCounter</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ping</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(t);</span><br><span class="line">        <span class="keyword">while</span>(t-q.<span class="built_in">front</span>()&gt;<span class="number">3000</span>)&#123;</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> q.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RecentCounter* obj = new RecentCounter();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;ping(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="901-股票价格跨度"><a href="#901-股票价格跨度" class="headerlink" title="901.股票价格跨度"></a>901.股票价格跨度</h3><p><a href="https://leetcode.cn/problems/online-stock-span/description/">901. 股票价格跨度 - 力扣（LeetCode）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StockSpanner</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; day;<span class="comment">//一周的股票存储</span></span><br><span class="line">    <span class="type">int</span> d;天数</span><br><span class="line">    <span class="built_in">StockSpanner</span>() &#123;</span><br><span class="line">        d=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> price)</span> </span>&#123;</span><br><span class="line">        day.<span class="built_in">push_back</span>(price);d++;<span class="type">int</span> s=<span class="number">0</span>;<span class="comment">//s为连续增长的天数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = d<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;  <span class="comment">//从后往前看连续几天小就返回几 包含当天</span></span><br><span class="line">            <span class="keyword">if</span>(day[i]&lt;=price)s++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your StockSpanner object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * StockSpanner* obj = new StockSpanner();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;next(price);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="2023-12-6-1"><a href="#2023-12-6-1" class="headerlink" title="2023.12.6"></a>2023.12.6</h2><h3 id="434-字符串中的单词数"><a href="#434-字符串中的单词数" class="headerlink" title="434.字符串中的单词数"></a>434.字符串中的单词数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSegments</span><span class="params">(string s)</span> </span>&#123;  </span><br><span class="line">      <span class="type">int</span> i=<span class="number">0</span>; <span class="comment">//从开头开始看</span></span><br><span class="line">      <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(s[i]==<span class="string">&#x27; &#x27;</span>&amp;&amp;i&lt;s.<span class="built_in">size</span>())i++;<span class="comment">//除去开头空格</span></span><br><span class="line">      <span class="keyword">if</span>(i&gt;=s.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//没有直接返回0；</span></span><br><span class="line">        <span class="type">int</span> t=<span class="number">0</span>;<span class="comment">//flag</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;s.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(s[i]!=<span class="string">&#x27; &#x27;</span>&amp;&amp;i&lt;s.<span class="built_in">size</span>())i++,t++;<span class="comment">//单词处理</span></span><br><span class="line">        <span class="keyword">if</span>(t!=<span class="number">0</span>)sum++;<span class="comment">//有单词单词数目++</span></span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27; &#x27;</span>)t=<span class="number">0</span>;<span class="comment">//后有空格至0</span></span><br><span class="line">        <span class="keyword">while</span>(s[i] == <span class="string">&#x27; &#x27;</span>&amp;&amp;i&lt;s.<span class="built_in">size</span>())i++;除去空格</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;<span class="comment">//返回数目</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Mary19920410/article/details/77372828">C++之split字符串分割_c++ split-CSDN博客</a></p><p>可以使用函数字符串分割</p><p>然后查看字符串的个数</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>image</title>
      <link href="/2023/12/10/image/"/>
      <url>/2023/12/10/image/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/12/10/image/hello.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ English</title>
      <link href="/2023/12/09/c++%20English/"/>
      <url>/2023/12/09/c++%20English/</url>
      
        <content type="html"><![CDATA[<h4 id="1、-fixed"><a href="#1、-fixed" class="headerlink" title="1、 fixed"></a>1、 fixed</h4><p>adj. 固定的；（神情）僵硬的；确定的，不变的；<br>v. 修理（fix 的过去式和过去分词形式）</p><h4 id="2、-precision"><a href="#2、-precision" class="headerlink" title="2、 precision"></a>2、 precision</h4><p>n. 精确（性），准确（性）；严谨，细致；<br>adj. （设计）精密的，精确的；要求技术精确的，（行动）精确的</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
